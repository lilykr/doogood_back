{
	// Place your dmitri-monorepo workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// },
	// "For Loop": {
	// 	"prefix": [
	// 		"for",
	// 		"for-const"
	// 	],
	// 	"body": [
	// 		"for (const ${2:element} of ${1:array}) {",
	// 		"\t$0",
	// 		"}"
	// 	],
	// 	"description": "A for loop."
	// },
	"Create a simple context": {
		"prefix": "rksvContext",
		"body": [
			"import React, { createContext, useContext, useMemo } from 'react'",
			"",
			"type ${1:ContextName}ContextType = {",
			"}",
			"",
			"export const ${1:ContextName}Context = createContext<${1}ContextType>({",
			"})",
			"",
			"const ${1:ContextName}Provider: React.FC = ({ children }) => {",
			"\tconst value: ${1:ContextName}ContextType = useMemo(() => ({",
			"\t}), [])",
			"",
			"\treturn (",
			"\t\t<${1:ContextName}Context.Provider value={value}>",
			"\t\t\t{children}",
			"\t\t</${1:ContextName}Context.Provider>",
			"\t)",
			"}",
			"",
			"export const use${1:ContextName} = () => {",
			"\tconst ctx = useContext(${1:ContextName}Context)",
			"\treturn ctx",
			"}",
			"",
			"export default ${1:ContextName}Provider",
		],
		"description": "Create a simple context",
	},
	"Create a simple test": {
		"prefix": "rksvTest",
		"body": [
			"import RksvText from 'components/atoms/Text/RksvText'",
			"import React from 'react'",
			"import { TestVariantsParams } from 'types/index'",
			"",
			"const tests${1:Component}: TestVariantsParams = {",
			"\ttitle: '${1:Component}',",
			"\tvariants: [",
			"\t\t{",
			"\t\t\ttitle: '${2:Prop}',",
			"\t\t\texamples: [",
			"\t\t\t\t{",
			"\t\t\t\t\ttitle: '${3:Value}',",
			"\t\t\t\t\tcomponent: <RksvText>Hello World!</RksvText>,",
			"\t\t\t\t},",
			"\t\t\t],",
			"\t\t},",
			"\t],",
			"}",
			"",
			"export default tests${1:Component}"
		],
		"description": "Create a simple test"
	},
	"Create a simple navigator": {
		"prefix": "rksvNavigator",
		"body": [
			"import React from 'react'",
			"import TestScreen from 'screens/Tests/TestScreen'",
			"",
			"import { createStackNavigator } from '@react-navigation/stack'",
			"",
			"/* --- ${1:NavigatorName} stack --- */",
			"",
			"export type ${1:NavigatorName}ParamsList = {",
			"\t${2:NavigatorPath}: undefined",
			"}",
			"",
			"const ${1:NavigatorName} = createStackNavigator<${1:NavigatorName}ParamsList>()",
			"",
			"const ${1:NavigatorName}Navigator: React.FC = () => {",
			"\treturn (",
			"\t\t<${1:NavigatorName}.Navigator",
			"\t\t\theaderMode=\"none\"",
			"\t\t\tscreenOptions={{ animationEnabled: true }}",
			"\t\t>",
			"\t\t\t<${1:NavigatorName}.Screen name=\"${2:NavigatorPath}\" component={TestScreen} />",
			"\t\t</${1:NavigatorName}.Navigator>",
			"\t)",
			"}",
			"",
			"export default ${1:NavigatorName}Navigator",
		],
		"description": "Create a simple navigator"
	},
	"Create a simple screen": {
		"prefix": "rksvScreen",
		"body": [
			"import Box from 'components/containers/Box/Box'",
			"import { StackParamsList } from 'navigators/RootNavigator'",
			"import React from 'react'",
			"",
			"import { NavigationProp } from '@react-navigation/native'",
			"",
			"type Props = {",
			"\tnavigation: NavigationProp<StackParamsList>",
			"}",
			"",
			"const ${1:ScreenName}Screen: React.FC<Props> = ({ navigation }) => {",
			"\treturn (",
			"\t\t<Box/>",
			"\t)",
			"}",
			"",
			"export default ${1:ScreenName}Screen"
		],
		"description": "Create a simple screen"
	},
	"A simple react component": {
		"prefix": "rksvComponent",
		"body": [
			"import Box from 'components/containers/Box/Box'",
			"import React, { useMemo } from 'react'",
			"import { StyleSheet } from 'react-native'",
			"",
			"import { useRksvTheme } from 'theme/ThemeProvider'",
			"import { Theme } from 'theme/themeTypes'",
			"",
			"type ${1:TemplateComponent}Props = {",
			"\t${2:prop}: ${3:string}",
			"}",
			"",
			"const ${1:TemplateComponent}: React.FC<${1:TemplateComponent}Props> = ({ children, ${2:prop} }) => {",
			"\tconst theme = useRksvTheme()",
			"\tconst styles = useMemo(() => themedStyles(theme), [theme])",
			"",
			"\treturn (",
			"\t\t<Box>",
			"\t\t\t{children}",
			"\t\t</Box>",
			"\t)",
			"}",
			"",
			"const themedStyles = (theme: Theme) => StyleSheet.create({",
			"})",
			"",
			"export default ${1:TemplateComponent}"
		],
		"description": "Create a simple component with comments"
	},
	"A simple react atom": {
		"prefix": "rksvAtom",
		"body": [
			"import Box, { BoxProps } from 'components/containers/Box/Box'",
			"import React, { useMemo } from 'react'",
			"import { StyleSheet } from 'react-native'",
			"",
			"import { useRksvTheme } from 'theme/ThemeProvider'",
			"import { Theme } from 'theme/themeTypes'",
			"",
			"type ${1:TemplateComponent}PartialProps = {",
			"\t${2:prop}: ${3:string}",
			"}",
			"",
			"type ${1:TemplateComponent}Props = ${1:TemplateComponent}PartialProps & BoxProps",
			"",
			"const ${1:TemplateComponent}: React.FC<${1:TemplateComponent}Props> = ({ children, ${2:prop}, ...props }) => {",
			"\tconst theme = useRksvTheme()",
			"\tconst styles = useMemo(() => themedStyles(theme), [theme])",
			"",
			"\treturn (",
			"\t\t<Box {...props}>",
			"\t\t\t{children}",
			"\t\t</Box>",
			"\t)",
			"}",
			"",
			"const themedStyles = (theme: Theme) => StyleSheet.create({",
			"})",
			"",
			"export default ${1:TemplateComponent}"
		],
		"description": "Create a simple component with comments"
	},
	"Create a component as chakra-ui atom": {
		"prefix": "atom",
		"body": [
			"import React from 'react'",
			"import { Box, BoxProps } from '@chakra-ui/react'",
			"",
			"type ${1:TemplateComponent}PartialProps = {",
			"\t${2:prop}: ${3:string}",
			"}",
			"",
			"type ${1:TemplateComponent}Props = BoxProps & ${1:TemplateComponent}PartialProps",
			"",
			"const ${1:TemplateComponent}: React.FC<${1:TemplateComponent}Props> = ({ children, ${2:prop}, ...props }) => {",
			"\t// React Hooks",
			"\t${0}",
			"\t// Custom Hooks",
			"",
			"\t// LifeCycle",
			"",
			"\t// Methods",
			"",
			"\t// Logging",
			"\tconsole.log('RENDERING: ${1:TemplateComponent}')",
			"",
			"\t// Render",
			"\treturn (",
			"\t\t<Box {...props}>",
			"\t\t\t{children}",
			"\t\t</Box>",
			"\t)",
			"}",
			"",
			"export default ${1:TemplateComponent}"
		],
		"description": "Create a component which extends props from chakra-ui atom"
	}
}